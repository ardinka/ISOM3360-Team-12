from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.utils import compute_class_weight

def train_random_forest_model(X_train, y_train):
    # Define the parameter grid
    param_grid = {
        'n_estimators': [100, 200, 300],
        'max_depth': [None, 5, 10],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4],
        'max_features': ['sqrt', 'log2'],
        'bootstrap': [True, False]
    }

    # Compute class weights
    class_weights = compute_class_weight('balanced', classes=[0, 1], y=y_train)
    
    # Create Random Forest classifier with class weights
    rfm = RandomForestClassifier(class_weight={0: class_weights[0], 1: class_weights[1]})

    # Create the GridSearchCV object
    grid_search = GridSearchCV(estimator=rfm, param_grid=param_grid, cv=5)

    # Train the model with grid search
    grid_search.fit(X_train, y_train)

    return grid_search

# Function to predict probabilities using the trained model
def predict_probabilities(trained_model, X):
    # Extract the best estimator from the trained model
    best_estimator = trained_model.best_estimator_
    
    # Predict probabilities using the best estimator
    probabilities = best_estimator.predict_proba(X)[:, 1]
    
    return probabilities
